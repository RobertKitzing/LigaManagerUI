/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.15.0.0 (NJsonSchema v9.10.25.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpResponseBase, HttpErrorResponse } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IClient {
    /**
     * Finds all teams
     * @return list of teams
     */
    team(): Observable<JSON>;
    /**
     * Creates a new team
     * @return Operation successful
     */
    team2(): Observable<JSON>;
    /**
     * Finds a single team by id
     * @id ID of team
     * @return Single team
     */
    team3(id: string): Observable<JSON>;
    /**
     * Delete a single team by id
     * @id ID of team
     * @return Deletion successful
     */
    team4(id: string): Observable<JSON>;
    /**
     * Renames a single team
     * @id ID of team
     * @return Team has been successfully renamed
     */
    rename(id: string): Observable<JSON>;
    /**
     * Find all seasons
     * @return List of seasons
     */
    season(): Observable<JSON>;
    /**
     * Create a new season
     * @return Operation successful
     */
    season2(): Observable<JSON>;
    /**
     * Find all teams related to a single season
     * @id ID of season
     * @return Array of teams related to the season
     */
    team5(id: string): Observable<JSON>;
    /**
     * Returns the current season ranking
     * @id ID of season
     * @return Current season ranking
     */
    ranking(id: string): Observable<JSON>;
    /**
     * Creates matches for a given season
     * @id ID of season
     * @return Operation successful
     */
    matches(id: string): Observable<JSON>;
    /**
     * Find matches
     * @id ID of season
     * @match_day (optional) Number identifying the matchday
     * @team_id (optional) 
     * @from (optional) 
     * @to (optional) 
     * @return Array of matches
     */
    matches2(id: string, match_day?: number | null | undefined, team_id?: string | null | undefined, from?: string | null | undefined, to?: string | null | undefined): Observable<JSON>;
    /**
     * Delete a single season
     * @id ID of season
     * @return Deletion successful
     */
    season3(id: string): Observable<JSON>;
    /**
     * Finds a single season
     * @id ID of season
     * @return Contains a single season object
     */
    season4(id: string): Observable<JSON>;
    /**
     * Starts a season
     * @id ID of season
     * @return Season has been successfully started
     */
    start(id: string): Observable<JSON>;
    /**
     * Find a single match by id
     * @id match id
     * @return Contains a single match object
     */
    match(id: string): Observable<JSON>;
    /**
     * Submit a matches result
     * @id match id
     * @return Operation successful
     */
    result(id: string): Observable<JSON>;
    /**
     * Cancel a match
     * @id match id
     * @return Operation successful
     */
    cancellation(id: string): Observable<JSON>;
    /**
     * Schedule a match
     * @id match id
     * @return Operation successful
     */
    kickoff(id: string): Observable<JSON>;
    /**
     * Locate a match on a pitch
     * @id match id
     * @return Operation successful
     */
    location(id: string): Observable<JSON>;
    /**
     * Find all pitches
     * @return Array of pitches
     */
    pitch(): Observable<JSON>;
    /**
     * Creates a new pitch
     * @return Operation successful
     */
    pitch2(): Observable<JSON>;
    /**
     * Find a single pitch by id
     * @id pitch id
     * @return Contains a single pitch object
     */
    pitch3(id: string): Observable<JSON>;
    /**
     * Delete a single pitch
     * @id pitch id
     * @return Deletion successful
     */
    pitch4(id: string): Observable<JSON>;
}

@Injectable()
export class Client implements IClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://soccer.skilled-by-nature.de";
    }

    /**
     * Finds all teams
     * @return list of teams
     */
    team(): Observable<JSON> {
        let url_ = this.baseUrl + "/team";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processTeam(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTeam(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processTeam(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Creates a new team
     * @return Operation successful
     */
    team2(): Observable<JSON> {
        let url_ = this.baseUrl + "/team";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processTeam2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTeam2(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processTeam2(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status === 400) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Finds a single team by id
     * @id ID of team
     * @return Single team
     */
    team3(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/team/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processTeam3(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTeam3(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processTeam3(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Delete a single team by id
     * @id ID of team
     * @return Deletion successful
     */
    team4(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/team/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processTeam4(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTeam4(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processTeam4(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Renames a single team
     * @id ID of team
     * @return Team has been successfully renamed
     */
    rename(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/team/{id}/rename";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processRename(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRename(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processRename(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status === 404) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Find all seasons
     * @return List of seasons
     */
    season(): Observable<JSON> {
        let url_ = this.baseUrl + "/season";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processSeason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSeason(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processSeason(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Create a new season
     * @return Operation successful
     */
    season2(): Observable<JSON> {
        let url_ = this.baseUrl + "/season";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processSeason2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSeason2(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processSeason2(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Find all teams related to a single season
     * @id ID of season
     * @return Array of teams related to the season
     */
    team5(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/season/{id}/team";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processTeam5(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTeam5(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processTeam5(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Returns the current season ranking
     * @id ID of season
     * @return Current season ranking
     */
    ranking(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/season/{id}/ranking";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processRanking(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRanking(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processRanking(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Creates matches for a given season
     * @id ID of season
     * @return Operation successful
     */
    matches(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/season/{id}/matches";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processMatches(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMatches(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processMatches(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Find matches
     * @id ID of season
     * @match_day (optional) Number identifying the matchday
     * @team_id (optional) 
     * @from (optional) 
     * @to (optional) 
     * @return Array of matches
     */
    matches2(id: string, match_day?: number | null | undefined, team_id?: string | null | undefined, from?: string | null | undefined, to?: string | null | undefined): Observable<JSON> {
        let url_ = this.baseUrl + "/season/{id}/matches?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (match_day !== undefined)
            url_ += "match_day=" + encodeURIComponent("" + match_day) + "&"; 
        if (team_id !== undefined)
            url_ += "team_id=" + encodeURIComponent("" + team_id) + "&"; 
        if (from !== undefined)
            url_ += "from=" + encodeURIComponent("" + from) + "&"; 
        if (to !== undefined)
            url_ += "to=" + encodeURIComponent("" + to) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processMatches2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMatches2(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processMatches2(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Delete a single season
     * @id ID of season
     * @return Deletion successful
     */
    season3(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/season/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processSeason3(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSeason3(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processSeason3(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Finds a single season
     * @id ID of season
     * @return Contains a single season object
     */
    season4(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/season/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processSeason4(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSeason4(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processSeason4(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status === 404) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Starts a season
     * @id ID of season
     * @return Season has been successfully started
     */
    start(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/season/{id}/start";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processStart(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStart(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processStart(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status === 400) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Find a single match by id
     * @id match id
     * @return Contains a single match object
     */
    match(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/match/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processMatch(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMatch(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processMatch(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status === 404) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Submit a matches result
     * @id match id
     * @return Operation successful
     */
    result(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/match/{id}/result";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processResult(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResult(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processResult(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Cancel a match
     * @id match id
     * @return Operation successful
     */
    cancellation(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/match/{id}/cancellation";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processCancellation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancellation(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processCancellation(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Schedule a match
     * @id match id
     * @return Operation successful
     */
    kickoff(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/match/{id}/kickoff";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processKickoff(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processKickoff(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processKickoff(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Locate a match on a pitch
     * @id match id
     * @return Operation successful
     */
    location(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/match/{id}/location";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processLocation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLocation(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processLocation(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Find all pitches
     * @return Array of pitches
     */
    pitch(): Observable<JSON> {
        let url_ = this.baseUrl + "/pitch";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processPitch(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPitch(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processPitch(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Creates a new pitch
     * @return Operation successful
     */
    pitch2(): Observable<JSON> {
        let url_ = this.baseUrl + "/pitch";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processPitch2(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPitch2(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processPitch2(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Find a single pitch by id
     * @id pitch id
     * @return Contains a single pitch object
     */
    pitch3(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/pitch/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processPitch3(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPitch3(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processPitch3(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status === 404) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }

    /**
     * Delete a single pitch
     * @id pitch id
     * @return Deletion successful
     */
    pitch4(id: string): Observable<JSON> {
        let url_ = this.baseUrl + "/pitch/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processPitch4(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPitch4(<any>response_);
                } catch (e) {
                    return <Observable<JSON>><any>Observable.throw(e);
                }
            } else
                return <Observable<JSON>><any>Observable.throw(response_);
        });
    }

    protected processPitch4(response: HttpResponseBase): Observable<JSON> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<JSON>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<JSON>(<any>null);
    }
}


export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}